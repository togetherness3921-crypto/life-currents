# .github/workflows/generate_previews.yml

# Name of the workflow, which will appear in the GitHub Actions UI.
name: Generate Previews with Codex

# This specifies how the workflow is triggered. 'workflow_dispatch' allows for manual triggering.
on:
  workflow_dispatch:
    # This defines the input fields that will appear on the GitHub UI when you run the workflow.
    inputs:
      prompt:
        description: 'The high-level prompt for Codex to implement.'
        required: true
        type: string

# Defines the set of permissions the workflow will have.
# This is crucial for allowing the workflow to create branches and pull requests.
permissions:
  contents: write
  pull-requests: write

jobs:
  # This is the main job that will run our parallel instances.
  run-codex-instances:
    # The job will run on the latest Ubuntu runner provided by GitHub.
    runs-on: ubuntu-latest
    
    # This is the core of the parallel execution. It defines a "matrix" of jobs.
    # We will run 5 jobs, each with a unique 'instance' number from 1 to 5.
    strategy:
      fail-fast: false # This ensures that if one job fails, the others will continue running.
      matrix:
        instance: [1, 2, 3, 4, 5]

    env:
      PROMPT: ${{ github.event.inputs.prompt }}
      INSTANCE_NUMBER: ${{ matrix.instance }}

    steps:
      # Step 1: Check out the repository's code so the job can work with it.
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Run Codex Action
      - name: Run Codex Action
        id: codex
        uses: openai/codex-action@main
        with:
          openai-api-key: ${{ secrets.OPENAI_API_KEY }}
          prompt: ${{ env.PROMPT }}
          sandbox: workspace-write
          model: gpt-5-codex

      - name: Install Supabase client
        run: npm install @supabase/supabase-js

      - name: Commit and Create PR
        id: post_codex
        env:
          # Pass secrets and context to the script
          PROMPT: ${{ env.PROMPT }}
          INSTANCE_NUMBER: ${{ env.INSTANCE_NUMBER }}
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
          CODEX_OUTPUT: ${{ steps.codex.outputs.final-message }}
        run: node .github/scripts/post_codex_step.cjs

      - name: Diagnostic - Check Deployments API
        if: always() # Run this even if the previous step fails
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          # Use the main branch SHA for this diagnostic run
          COMMIT_SHA: ${{ github.sha }}
        run: |
          echo "--- DIAGNOSTIC: Checking deployments for SHA: $COMMIT_SHA ---"
          gh api "repos/${{ github.repository }}/deployments?sha=${COMMIT_SHA}"
          echo "--- END DIAGNOSTIC ---"
